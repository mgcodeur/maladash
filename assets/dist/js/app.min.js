var S = (n, e, t) => {
  if (!e.has(n))
    throw TypeError("Cannot " + t);
};
var s = (n, e, t) => (S(n, e, "read from private field"), t ? t.call(n) : e.get(n)), c = (n, e, t) => {
  if (e.has(n))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(n) : e.set(n, t);
}, l = (n, e, t, i) => (S(n, e, "write to private field"), i ? i.call(n, t) : e.set(n, t), t);
const b = {
  xs: 0,
  sm: 576,
  md: 768,
  lg: 992,
  xl: 1200
}, p = document.documentElement, M = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
var f;
const L = class L {
  /**
   *
   * @param {HTMLElement} btnToggler
   * @returns {void}
   */
  constructor(e) {
    c(this, f, void 0);
    if (!e)
      return !1;
    this.onClick = this.onClick.bind(this), l(this, f, e), s(this, f).addEventListener("click", this.onClick);
  }
  /**
   *
   * @param {Event} e
   * @return {void}
   */
  onClick(e) {
    e.preventDefault(), e.stopPropagation(), document.fullscreenElement ? document.exitFullscreen() : p.requestFullscreen();
  }
  /**
   *
   * @param {string} className
   * @returns {FullscreenToggler[HTMLElement]}
   */
  static bind(e) {
    const t = Array.from(document.querySelectorAll(e));
    return t.length ? t.map((i) => new L(i)) : !1;
  }
};
f = new WeakMap();
let k = L;
var d;
const A = class A {
  /**
   *
   * @param {HTMLElement} menu
   */
  constructor(e) {
    c(this, d, void 0);
    l(this, d, e), this.onMenuClick = this.onMenuClick.bind(this), s(this, d).addEventListener("click", this.onMenuClick);
  }
  /**
   *
   * @param {Event} event
   */
  onMenuClick(e) {
    e.preventDefault();
    const t = document.querySelector(".app-wrapper").classList.contains("compact-sidebar"), i = window.innerWidth < b.md;
    (!t || t && i) && s(this, d).parentElement.classList.toggle("show");
  }
  /**
   *
   * @param {string} selector
   * @returns {SidebarNestedMenu[HTMLElement]}
   */
  static bind(e) {
    const t = Array.from(document.querySelectorAll(e));
    return t.length ? t.map((i) => new A(i)) : !1;
  }
};
d = new WeakMap();
let C = A;
var u, h, a;
const r = class r {
  /**
   * toggler and closer btn can be null
   * @param {HTMLElement} toggler the toggler btn
   * @param {HTMLElement} closer the sidebar closer btn
   * @returns {void}
   */
  constructor(e = null, t = null) {
    c(this, u, void 0);
    c(this, h, void 0);
    if (!e && !t)
      return !1;
    l(this, u, e), l(this, h, t), this.onClickToggler = this.onClickToggler.bind(this), this.onClickCloser = this.onClickCloser.bind(this), this.onScreenResize = this.onScreenResize.bind(this), s(this, h) && s(this, h).addEventListener("click", this.onClickCloser), s(this, u) && s(this, u).addEventListener("click", this.onClickToggler), window.addEventListener("resize", this.onScreenResize);
  }
  /**
   * @param {Event} e
   * @return {boolean | void}
   */
  onClickToggler(e) {
    if (e.preventDefault(), e.stopPropagation(), window.innerWidth < b.md)
      return s(r, a).classList.toggle("open-sidebar"), !1;
    s(r, a).classList.toggle("compact-sidebar");
  }
  /**
   * @param {Event} e
   * @return {void}
   */
  onClickCloser(e) {
    e.preventDefault(), e.stopPropagation(), s(r, a).classList.toggle("open-sidebar");
  }
  /**
   *
   * @param {Event} e
   * @return {void}
   */
  onScreenResize(e) {
    e.target.innerWidth < b.md && s(r, a).classList.remove("open-sidebar");
  }
  /**
   *
   * @param {string} className
   * @param {string} sidebarClass
   * @returns {SidebarToggler[HTMLElement]}
   */
  static listenAllSidebarToggler(e, t) {
    l(r, a, document.querySelector(`.${t}`));
    const i = Array.from(document.querySelectorAll(`.${e}`));
    return i.length ? i.map((v) => new r(v, null)) : !1;
  }
  /**
   *
   * @param {string} className
   * @returns {SidebarToggler[HTMLElement]}
   */
  static listenAllSidebarCloser(e) {
    const t = Array.from(document.querySelectorAll(`.${e}`));
    return t.length ? t.map((i) => new r(null, i)) : !1;
  }
};
u = new WeakMap(), h = new WeakMap(), a = new WeakMap(), c(r, a, void 0);
let g = r;
var m, o;
const y = class y {
  /**
   * @param {HTMLElement} switcher
   */
  constructor(e) {
    c(this, m, void 0);
    c(this, o, void 0);
    if (!e)
      return !1;
    l(this, m, e), this.onclick = this.onclick.bind(this), l(this, o, s(this, m).getAttribute("data-switch-to")), s(this, m).addEventListener("click", this.onclick);
  }
  /**
   *
   * @param {Event} e
   * @returns {void | boolean}
   */
  onclick(e) {
    if (e.preventDefault(), e.stopPropagation(), s(this, o) === "auto" && l(this, o, M), p.classList.contains(`${s(this, o)}-mode`))
      return !1;
    p.removeAttribute("class"), p.classList.add(`${s(this, o)}-mode`), localStorage.setItem("_mode", `${s(this, o)}-mode`);
  }
  /**
   *
   * @param {string} selector
   * @returns {ThemeModeToggler[HTMLElement]}
   */
  static bind(e) {
    const t = Array.from(document.querySelectorAll(e));
    return t.length ? t.map(function(i) {
      return new y(i);
    }) : !1;
  }
};
m = new WeakMap(), o = new WeakMap();
let w = y;
g.listenAllSidebarToggler("sidebar-toggler", "app-wrapper");
g.listenAllSidebarCloser("sidebar-closer");
w.bind("[data-switch-to]");
k.bind(".fullscreen-toggler");
C.bind(".sidebar-item.has-submenu > .sidebar-link");
